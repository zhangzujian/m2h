#!/usr/bin/ruby

require 'rubygems'
require 'redcarpet'
require 'rouge'
require 'rouge/plugins/redcarpet'
require 'optparse'

$options = {
  "autolink": true,
  "tables": true,
  "fenced_code_blocks": true,
  "disable_indented_code_blocks": true
}

class HTML < Redcarpet::Render::HTML
  include Rouge::Plugins::Redcarpet
end

class CLI
  def self.options_parser
    @@options = {
      stylefile: [],
      pagetitle: "",
      outputfile: ""
    }

    OptionParser.new do |opts|
      opts.banner = "Usage: m2h [-s <STYLEFILE>...] [-t <PAGETITLE>] [-o <OUTPUTFILE>] <file>"

      opts.on("-s STYLEFILE", "--style STYLEFILE", "CSS file") do |css|
        @@options[:stylefile] << css
      end

      opts.on("-t PAGETITLE", "--pagetitle PAGETITLE", "Page title") do |title|
        @@options[:pagetitle] = title
      end

      opts.on("-o OUTPUTFILE", "--output OUTPUTFILE", "Output HTML file") do |output|
        @@options[:outputfile] = output
      end

      opts.on_tail("-h", "--help", "Display this help message") do
        puts opts
        exit
      end
    end
  end

  def self.process(args)
    self.options_parser.parse!(args)
    parser_object = Redcarpet::Markdown.new(HTML, $options)
    title = @@options[:pagetitle]
    css = Rouge::Themes::Github.render(scope: '.highlight')
    body = parser_object.render(ARGF.read)
    @@options[:stylefile].each { |file| css = '%s</style><style type="text/css">%s' % [css, File.read(file)] }

    html = '<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang xml:lang>
<head>
    <meta charset="utf-8" />
    <meta name="generator" content="m2h" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
    <title>%s</title>
    <style type="text/css">
    %s
    </style>
</head>
<body>
%s
</body>
</html>' % [title, css, body]
    if @@options[:outputfile] != ""
      File.write(@@options[:outputfile], html)
    else
      STDOUT.write html
    end
  end
end

if ARGV.first
  str = ARGV.first
  str = str.dup.force_encoding("BINARY") if str.respond_to? :force_encoding
  if str =~ /\A_(.*)_\z/ and Gem::Version.correct?($1) then
    ARGV.shift
  end
end

CLI.process(ARGV)
